[
["model-performance.html", "7 Model Performance Get Results Predictions Statistics Plots", " 7 Model Performance The following section describes the function getModResults() which coordinates the steps after your pls or mbl model is created: 1. Getting Predictions 2. Generating Summary Statistics 3. Displaying plots This allows us to assess the performance of the model. How close are the predictions to the observed lab data? If you do not have lab data to compare your predictions to, you should simply use the functions getPredPLS() and getPredMBL() Get Results The following function returns the results for either pls or mbl models. It takes in the model as either a path, MODPATH, or the name of the object, MODNAME. The type of model, pls or mbl, must be specified with MODTYPE. It also requires the prediction set as a path, PREDPATH, or an object name, PREDNAME, as well as the name of the soil property column you are predicting for. This allows it to query the corresponding lab data and save predictions in a comprehensive file, while SAVEPRED=TRUE. Model performance is also generated by default, but can be shut off with MODPERF=FALSE getModResults() getModResults() PROP: string- The column name of the soil property of interest. Ex: “OC” MODTYPE: string- “MBL” or “PLS” MODNAME: string- The name of the model variable, if it is already loaded into the R environment. Use MODNAME or MODPATH MODPATH: string- The path the the RData file containing your model, if the model is not already loaded. Use MODNAME or MODPATH PREDNAME: string- The name of the prediction set variable, if it is already loaded into the R environment, that will be used to create the model. Use PREDNAME or PREDPATH PREDPATH: string- The path the the RData file containing your prediction set, if the prediction set is not already loaded. PREDNAME or PREDPATH SAVEPRED: boolean- Whether or not to save the predictions. If TRUE, predictions will be saved to the folder ‘Predictions’ using the function savePredictions(). Default is set to TRUE MODPERF: boolean- Whether or not to generate and show the prediction performance statistics. If TRUE, these statistics will be generated by the getModStats() function, and saved in the folder ‘Predictions’ in the performance log. getModResults &lt;- function(PROP, MODTYPE, MODNAME=NA, MODPATH=NA, PREDNAME=NA, PREDPATH=NA, SAVEPRED=TRUE, MODPERF=TRUE){ # Load Model if(!is.na(MODPATH)){ MODNAME &lt;- load(MODPATH) } model &lt;- get(MODNAME) # Load Prediction Set if(!is.na(PREDPATH)){ PREDNAME &lt;- load(PREDPATH) } predSet &lt;- get(PREDNAME) # Extract Predictions if(MODTYPE==&quot;MBL&quot;){ ncomp_onesigma &lt;- NA pred_type &lt;- NA predictions &lt;- getPredMBL(model) } if(MODTYPE==&quot;PLS&quot;){ # Find Optimal Number of Components ncomp_onesigma &lt;- selectNcomp(model, method = &quot;onesigma&quot;, plot=TRUE, main=PROP) # Get Predictions pred_type &lt;- &quot;predict&quot; predictions &lt;- getPredPLS(model, ncomp_onesigma, pred_type , predSet) } # Get Pred Versus Observations lab_data &lt;- predSet[,PROP] # Lab Data predobs &lt;- data.frame(predSet[,&quot;sample_id&quot;], predictions, lab_data) names(predobs) &lt;- c(&quot;sample_id&quot;,&quot;pred&quot;,&quot;obs&quot;) # {Optional} Model Performance if(MODPERF==TRUE){ modstats &lt;- getModStats(PREDOBS= predobs, PROP=PROP, NCOMP=ncomp_onesigma, MODNAME=MODNAME, PREDTYPE= pred_type, PREDNAME=PREDNAME, SAVE=TRUE) } # {Optional} Save Predictions if(SAVEPRED==TRUE){ savePredictions(predobs, PROP, MODTYPE, predSet, paste0(PREDNAME,&quot;_predictions.csv&quot;)) } names(predobs) &lt;- c(&quot;sample_id&quot;, paste0(PROP,&quot;.&quot;,MODTYPE), PROP) return(predobs) } Predictions Predictions are extracting using either getPredPLS() or getPredMBL(). These are called within getModResults() before being saved. The following functions save predictions to a file unique to each prediction set. If this file already exists, it simply adds another column of predictions. If it does not, it will create the file to save predictions in from the original prediction set. getSavePredTable() getSavePredTable &lt;- function(PREDSET, SAVENAME){ if(file.exists(&quot;./Predictions&quot;)==FALSE){dir.create(&quot;./Predictions&quot;)} predSavePath &lt;- paste0(&quot;./Predictions/&quot;, SAVENAME) if(file.exists(predSavePath) ){ all_predictions &lt;- read.csv(predSavePath) }else{ all_predictions &lt;- PREDSET[,-ncol(PREDSET)] # remove spectra, last column } return(all_predictions) } savePredictions() savePredictions &lt;- function(PREDOBS, PROP, MODTYPE, PREDSET, SAVENAME){ all_predictions &lt;- getSavePredTable(PREDSET, SAVENAME) # Make/Load file to save predictions savename &lt;- paste(PROP,MODTYPE,sep=&quot;.&quot;) # Ex: OC.PLSR column name if(!(savename %in% names(all_predictions))){ all_predictions &lt;- merge(all_predictions, PREDOBS[,1:2] , all.X=TRUE) # Merge with all_predictions ncolm &lt;- ncol(all_predictions) names(all_predictions)[ncolm] &lt;- savename savefile &lt;- paste0(&quot;Predictions/&quot;, SAVENAME) # Set file savename write.csv(all_predictions, file=savefile, row.names=FALSE) # Save cat(paste(&quot;\\nPredictions saved to&quot;, savefile)) # Print save location }else{ cat(&quot;\\nPrediction column already exists&quot;) } View(all_predictions) } Statistics After making predictions using either of the modeling methods, various summary statistics can help test the accuracy of those predictions. getModStats() The getModStats function returns the following statistics in a dataframe: R2 R2 adjusted Slope Y-Intercept RMSE Bias Standard deviation (of predictions) Residual prediction deviation The minimum input is the PREDOBS table containing a column ‘pred’, containing the predictions and a column ‘obs’, its corresponding lab data. The remaining parameters are characteristics about the models and prediction runs that are important to include if you are saving the statistics. getModStats &lt;- function(PREDOBS, PROP=NA, NCOMP=NA, MODNAME=NA, PREDTYPE=NA, PREDNAME=NA, SAVE=FALSE){ print(paste(PROP, &quot;Summary&quot;)) TIME &lt;- as.character(Sys.time()[1]) # Regress predicted versus observed PREDOBS &lt;- na.omit(PREDOBS) reg_mod &lt;- lm(PREDOBS$pred ~ PREDOBS$obs) sum_perf &lt;- summary(reg_mod) # Get statistics R2 &lt;- round(sum_perf$r.squared,4) R2_adj &lt;- round(sum_perf$adj.r.squared,4) b0 &lt;- round(sum_perf$coefficients[1], 2) # Y-Intercept b1 &lt;- round(sum_perf$coefficients[2],2) # Slope RMSE &lt;- round(sqrt(mean((PREDOBS$pred - PREDOBS$obs)^2)),2) bias &lt;- round((sum(PREDOBS$pred, na.rm=TRUE)- sum(PREDOBS$obs, na.rm=TRUE))/length(PREDOBS$obs),2) std &lt;- round(sd(PREDOBS$pred, na.rm=TRUE),2) # Standard Deviation rpd &lt;- round(std / RMSE,2) # Residual Prediction Deviation # Assemble Row modStats &lt;- data.frame(Timestamp=TIME, Property=PROP, Mod_Name=MODNAME, Pred_Type=PREDTYPE, Pred_Data=PREDNAME, ncomp=NCOMP, R2=R2, R2_Adj=R2_adj, Y_Int=b0, Slope=b1, RMSE=RMSE, bias=bias,STD=std, RPD=rpd) # Write Row if(SAVE==TRUE){saveModStats(modStats)} # Plot Pred Obs plot.plsr(PREDOBS$obs, PREDOBS$pred, modStats, paste(MODNAME,PREDNAME,&quot;Predictions&quot;), &quot;&quot;) # Print Statistics print(t(modStats)) return(modStats) } # End of getModStats saveModStats() The following function will save the prediction statistics and information as a row in the performance log: Predictions/prediction_performance.csv saveModStats &lt;- function(MODSTATS){ if(file.exists(&quot;./Predictions&quot;)==FALSE){dir.create(&quot;./Predictions&quot;)} modStats_file &lt;- &quot;Predictions/prediction_performance.csv&quot; if(file.exists(modStats_file)==FALSE){ write.csv(MODSTATS, file = modStats_file, row.names=FALSE) }else{ save_table &lt;- read.csv(modStats_file) save_table &lt;- rbind(save_table,MODSTATS) write.csv(save_table, modStats_file, row.names=FALSE) } print(paste(&quot;Statistics saved to&quot;, modStats_file)) } Plots The following function creates a scatter plot of the observed lab data against the predictions, showing the line of best fit and its equation, as well as some summary statistics. plotPred() plotPred &lt;- function(x,y, stats, name=NA, units=NA){ max &lt;- max(c(x,y)) lims = c(0,(1.1*max)) plot(y ~ x, ylab = paste(&quot;Predicted&quot;, units), xlab=paste(&quot;Observed&quot;, units), xlim = lims, ylim=lims,main = paste(name)) reg_model &lt;-lm(y~x) abline(reg_model) topstats &lt;- bquote(R^2 == .(stats$R2) * &quot;,&quot; ~~italic(bias)== .(stats$bias) * &quot;,&quot; ~~ RMSE == .(stats$RMSE)) text(min(x,y),max(x,y), topstats, pos = 4, col=&quot;blue&quot;) eqn &lt;- bquote(y== .(stats$Slope) * &quot;x&quot; * &quot; + &quot; * .(stats$Y_Int)) text(min(x,y),max(x,y)-(max(x,y)-min(x,y))/10, eqn, pos = 4, col=&quot;blue&quot;) } "]
]
